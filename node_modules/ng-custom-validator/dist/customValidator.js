"use strict";
var CustomValidator = (function () {
    /**
     * AngularJS validation wrapper.
     * Set AngularJS specific setup to use custom validation directive.
     * @param validator The validator class implementing IValidator.
     * @param directiveName The directive name in pascal casing.
     */
    function CustomValidator(validator, directiveName) {
        var _this = this;
        this.directiveName = directiveName;
        this.link = function (scope, element, attrs, ngModel) {
            ngModel.$validators[_this.directiveName] = function (modelValue, viewValue) {
                return _this.validateInput(modelValue, viewValue, ngModel, attrs);
            };
            attrs.$observe(_this.directiveName, function () { return ngModel.$validate(); });
        };
        /**
         * Validate value against validator.
         * @param value The value to validate.
         */
        this.validateInput = function (modelValue, viewValue, ngModel, attrs) {
            if (ngModel.$isEmpty(modelValue)) {
                return true;
            }
            return _this.validator.isValid(viewValue, attrs);
        };
        if (!validator) {
            throw Error('CustomValidator: A validator must be supplied');
        }
        if (!directiveName) {
            throw Error('CustomValidator: A directive name must be supplied');
        }
        this.validator = new validator();
    }
    /**
     * Factory method to register directive with AngularJS.
     * @param dependencies Optional dependency object to set on validator.
     */
    CustomValidator.prototype.factory = function (dependencies) {
        if (dependencies && this.validator.setDependencies) {
            this.validator.setDependencies(dependencies);
        }
        return {
            link: this.link,
            require: 'ngModel',
            scope: false,
        };
    };
    return CustomValidator;
}());
exports.CustomValidator = CustomValidator;
//# sourceMappingURL=customValidator.js.map