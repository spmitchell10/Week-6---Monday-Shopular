/// <reference types="angular" />
import { IValidator } from './validator.interface';
export declare class CustomValidator<TDependencies> {
    private directiveName;
    validator: IValidator<TDependencies>;
    /**
     * AngularJS validation wrapper.
     * Set AngularJS specific setup to use custom validation directive.
     * @param validator The validator class implementing IValidator.
     * @param directiveName The directive name in pascal casing.
     */
    constructor(validator: {
        new (): IValidator<TDependencies>;
    }, directiveName: string);
    link: (scope: angular.IScope, element: angular.IAugmentedJQuery, attrs: angular.IAttributes, ngModel: angular.INgModelController) => void;
    /**
     * Validate value against validator.
     * @param value The value to validate.
     */
    validateInput: (modelValue: any, viewValue: any, ngModel: angular.INgModelController, attrs: angular.IAttributes) => boolean;
    /**
     * Factory method to register directive with AngularJS.
     * @param dependencies Optional dependency object to set on validator.
     */
    factory(dependencies?: TDependencies): ng.IDirective;
}
